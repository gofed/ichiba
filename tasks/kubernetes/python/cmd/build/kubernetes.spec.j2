%global debug_package   %{nil}

%global provider	github
%global provider_tld	com
%global project		kubernetes
%global repo		kubernetes
# https://github.com/kubernetes/kubernetes
%global provider_prefix	%{provider}.%{provider_tld}/%{project}/%{repo}
%global import_path     k8s.io/kubernetes
%global commit		{{ commit }}
%global shortcommit	%(c=%{commit}; echo ${c:0:7})

%global con_provider         github
%global con_provider_tld     com
%global con_project          kubernetes
%global con_repo             contrib
%global con_provider_prefix  %{con_provider}.%{con_provider_tld}/%{con_project}/%{con_repo}
%global con_commit           1159b3d1823538f121a07c450fc5d93057226ffa
%global con_shortcommit      %(c=%{con_commit}; echo ${c:0:7})

#I really need this, otherwise "version_ldflags=$(kube::version_ldflags)"
# does not work
%global _buildshell	/bin/bash
%global _checkshell	/bin/bash

Name:		kubernetes
Version:	{{ version }}
Release:	{{ release }}.git%{shortcommit}%{?dist}
Summary:        Container cluster management
License:        ASL 2.0
URL:            %{import_path}
ExclusiveArch:  x86_64
Source0:        https://%{provider_prefix}/archive/%{commit}/%{repo}-%{shortcommit}.tar.gz
Source1:        https://github.com/jteeuwen/go-bindata/archive/a0ff2567cfb70903282db057e799fd826784d41d/go-bindata-a0ff256.tar.gz
Source2:        https://%{provider}.%{provider_tld}/%{project}/%{con_repo}/archive/%{con_commit}/%{con_repo}-%{con_shortcommit}.tar.gz

# kubernetes is decomposed into master and node subpackages
# require both of them for updates
Requires: kubernetes-master = %{version}-%{release}
Requires: kubernetes-node = %{version}-%{release}

%description
%{summary}

%package master
Summary: Kubernetes services for master host

BuildRequires: golang
BuildRequires: systemd
BuildRequires: rsync

Requires(pre): shadow-utils
Requires: kubernetes-client = %{version}-%{release}

# if node is installed with node, version and release must be the same
Conflicts: kubernetes-node < %{version}-%{release}
Conflicts: kubernetes-node > %{version}-%{release}

%description master
Kubernetes services for master host

%package node
Summary: Kubernetes services for node host

Requires: docker

BuildRequires: golang
BuildRequires: systemd
BuildRequires: rsync

Requires(pre): shadow-utils
Requires: socat
Requires: kubernetes-client = %{version}-%{release}

# if master is installed with node, version and release must be the same
Conflicts: kubernetes-master < %{version}-%{release}
Conflicts: kubernetes-master > %{version}-%{release}

%description node
Kubernetes services for node host

%package client
Summary: Kubernetes client tools

BuildRequires: golang

%description client
Kubernetes client tools like kubectl

%prep
%setup -q -n go-bindata-a0ff2567cfb70903282db057e799fd826784d41d -T -b 1
%setup -q -n %{con_repo}-%{con_commit} -T -b 2
%setup -q -n %{repo}-%{commit}

# move content of contrib back to kubernetes
mv ../%{con_repo}-%{con_commit}/init contrib/init

%build
export KUBE_GIT_TREE_STATE="clean"
export KUBE_GIT_COMMIT=%{commit}
export KUBE_GIT_VERSION={{ git_describe }}

mkdir -p deps/src/github.com/jteeuwen/go-bindata
export GOPATH=$(pwd)/deps
cp -r ../go-bindata-a0ff2567cfb70903282db057e799fd826784d41d/* deps/src/github.com/jteeuwen/go-bindata/.

mkdir -p deps/bin
go build -o deps/bin/go-bindata github.com/jteeuwen/go-bindata/go-bindata
export PATH=$PATH:$(pwd)/deps/bin

# Patch the code to remove eliptic.P224 support
if [ -d "vendor/github.com/google/certificate-transparency/go/x509" ]; then
	pushd vendor/github.com/google/certificate-transparency/go/x509
	sed -i "/^[^=]*$/ s/oidNamedCurveP224/oidNamedCurveP256/g" *.go
	sed -i "/^[^=]*$/ s/elliptic\.P224/elliptic.P256/g" *.go
	popd
fi
if [ -d "pkg/util/certificates" ]; then
	pushd pkg/util/certificates
	sed -i "/^[^=]*$/ s/oidNamedCurveP224/oidNamedCurveP256/g" *.go
	sed -i "/^[^=]*$/ s/elliptic\.P224/elliptic.P256/g" *.go
	popd
fi

hack/build-go.sh --use_go_build cmd/kube-apiserver cmd/kube-controller-manager cmd/kube-proxy cmd/kubelet cmd/kubectl plugin/cmd/kube-scheduler

%install
. hack/lib/init.sh
kube::golang::setup_env

output_path="${KUBE_OUTPUT_BINPATH}/$(kube::golang::current_platform)"

binaries=(kube-apiserver kube-controller-manager kube-scheduler kube-proxy kubelet kubectl)
install -m 755 -d %{buildroot}%{_bindir}
for bin in "${binaries[@]}"; do
  echo "+++ INSTALLING ${bin}"
  install -p -m 755 -t %{buildroot}%{_bindir} ${output_path}/${bin}
done

# install config files
install -d -m 0755 %{buildroot}%{_sysconfdir}/%{name}
install -m 644 -t %{buildroot}%{_sysconfdir}/%{name} contrib/init/systemd/environ/*

# install service files
install -d -m 0755 %{buildroot}%{_unitdir}
install -m 0644 -t %{buildroot}%{_unitdir} contrib/init/systemd/*.service

# install the place the kubelet defaults to put volumes
install -d %{buildroot}%{_sharedstatedir}/kubelet

# place contrib/init/systemd/tmpfiles.d/kubernetes.conf to /usr/lib/tmpfiles.d/kubernetes.conf
install -d -m 0755 %{buildroot}%{_tmpfilesdir}
install -p -m 0644 -t %{buildroot}/%{_tmpfilesdir} contrib/init/systemd/tmpfiles.d/kubernetes.conf

%check

%files
# empty as it depends on master and node

%files master
%doc README.md LICENSE CONTRIB.md CONTRIBUTING.md DESIGN.md
%attr(754, -, kube) %caps(cap_net_bind_service=ep) %{_bindir}/kube-apiserver
%{_bindir}/kube-controller-manager
%{_bindir}/kube-scheduler
%{_unitdir}/kube-apiserver.service
%{_unitdir}/kube-controller-manager.service
%{_unitdir}/kube-scheduler.service
%dir %{_sysconfdir}/%{name}
%config(noreplace) %{_sysconfdir}/%{name}/apiserver
%config(noreplace) %{_sysconfdir}/%{name}/scheduler
%config(noreplace) %{_sysconfdir}/%{name}/config
%config(noreplace) %{_sysconfdir}/%{name}/controller-manager
%{_tmpfilesdir}/kubernetes.conf

%files node
%doc README.md LICENSE CONTRIB.md CONTRIBUTING.md DESIGN.md
%{_bindir}/kubelet
%{_bindir}/kube-proxy
%{_unitdir}/kube-proxy.service
%{_unitdir}/kubelet.service
%dir %{_sharedstatedir}/kubelet
%dir %{_sysconfdir}/%{name}
%config(noreplace) %{_sysconfdir}/%{name}/config
%config(noreplace) %{_sysconfdir}/%{name}/kubelet
%config(noreplace) %{_sysconfdir}/%{name}/proxy
%{_tmpfilesdir}/kubernetes.conf

%files client
%doc README.md LICENSE CONTRIB.md CONTRIBUTING.md DESIGN.md
%{_bindir}/kubectl

%pre master
getent group kube >/dev/null || groupadd -r kube
getent passwd kube >/dev/null || useradd -r -g kube -d / -s /sbin/nologin \
        -c "Kubernetes user" kube

%post master
%systemd_post kube-apiserver kube-scheduler kube-controller-manager

%preun master
%systemd_preun kube-apiserver kube-scheduler kube-controller-manager

%postun master
%systemd_postun

%pre node
getent group kube >/dev/null || groupadd -r kube
getent passwd kube >/dev/null || useradd -r -g kube -d / -s /sbin/nologin \
        -c "Kubernetes user" kube

%post node
%systemd_post kubelet kube-proxy

%preun node
%systemd_preun kubelet kube-proxy

%postun node
%systemd_postun

%changelog
